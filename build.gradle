import org.ajoberstar.grgit.*

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.3.RELEASE")
		classpath 'org.ajoberstar:gradle-git:1.3.0'
    }
}

plugins {
	id "net.researchgate.release" version "2.1.0"  
}

apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply from: "gradle/autoversioning.gradle"
//apply from: "gradle/herokuDeploy.gradle"
//apply from: 'gradle/smoketests.gradle'
//apply from: 'gradle/issuetracker.gradle'

ext.repo = Grgit.open(project.file('.'))

release {
	git {
		requireBranch = 'develop'
	}
}

task createReleaseBranch() {
	doLast {
		def releaseBranchName = System.getProperty("release.name")
		println "releaseBranchName=${releaseBranchName}"
		if (null == releaseBranchName) {
			println "releaseBranchName=NULL"
			throw new GradleException("-DÃŸrelease.name=.. missing.")
		}
		println "release branch name = ${releaseBranchName}"
		repo = Grgit.open(project.file('.'))
		println "repo=${repo.getClass()}"
		def branchService = repo.getBranch()
		println "branchService=${branchService.getClass()}"
		def developBranch = branchService.getCurrent()
		println "branch current=${developBranch}"
		def branchStatus
		try {
			branchStatus = branchService.getStatus(name: releaseBranchName)
			println "btanch status = ${branchStatus}"
			throw new GradleException("Branch ${releaseBranchName} already exists.")
		}
		catch(Exception e) {}
		println "branch status=${branchStatus.getClass()}"
		println "branch status=${branchStatus}"
		branchService.add(name: releaseBranchName)	
		println "branch current=${branchService.getCurrent()}"
		//branchService.change(name: "develop")
	}	
}

updateVersion.dependsOn createReleaseBranch

repositories {
    jcenter()
	maven {
		url = "https://repo.gradle.org/gradle/evaluation-snapshot-repo"
	}
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
	//compile 'org.acme.test.consumer:plugin:1.0-SNAPSHOT'
	compile "org.codehaus.groovy:groovy-all:2.3.10"
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    compile "org.springframework.boot:spring-boot-starter-jetty"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    testCompile "junit:junit"
	testCompile "org.springframework.boot:spring-boot-starter-test"


//    smokeTestCompile "org.gebish:geb-core:0.9.3"
//    smokeTestCompile "org.seleniumhq.selenium:selenium-chrome-driver:2.41.0"
//    smokeTestCompile "org.seleniumhq.selenium:selenium-support:2.41.0"
//    smokeTestCompile "org.gebish:geb-spock:0.9.3"
//    smokeTestCompile "org.spockframework:spock-core:1.0-groovy-2.3"
}

processResources {
	
	inputs.property "version", project.version

	filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [version: project.version])
}

class CustomEventLogger extends BuildAdapter implements TaskExecutionListener {
	public void beforeExecute(Task task) {
		println "beforeExec ${task.name}"
		println "${(new File('gradle.properties')).text}"
	}
	public void afterExecute(Task task, TaskState state) {
		println "afterExec ${task.name}"
	}
}
//gradle.useLogger(new CustomEventLogger())

